Report 56060 "Red Purch Order Item Tr Tax"
{
    Caption = 'Purchase Order Item Tracking Tax';
    WordLayout = '.\Layouts\ForNAV Purch Order Item Tr Tax.docx';
    DefaultLayout = Word;

    dataset
    {
        dataitem(Header; "Purchase Header")
        {
            CalcFields = "Amount Including VAT", Amount;
            DataItemTableView = sorting("Document Type", "No.") where("Document Type" = const(Order));
            RequestFilterFields = "No.", "Posting Date";
            column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_Header; ReportForNavWriteDataItem('Header', Header)) { }
            column(HasDiscount; ForNAVCheckDocumentDiscount.HasDiscount(Header))
            {
                IncludeCaption = false;
            }
            dataitem(Line; "Purchase Line")
            {
                DataItemLinkReference = Header;
                DataItemLink = "Document No." = FIELD("No."), "Document Type" = FIELD("Document Type");
                DataItemTableView = sorting("Document No.", "Line No.");
                column(ReportForNavId_3; 3) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_Line; ReportForNavWriteDataItem('Line', Line)) { }
                dataitem(TrackingSpecification; "Tracking Specification")
                {
                    UseTemporary = true;
                    column(ReportForNavId_1000000003; 1000000003) { } // Autogenerated by ForNav - Do not delete
                    column(ReportForNav_TrackingSpecification; ReportForNavWriteDataItem('TrackingSpecification', TrackingSpecification)) { }
                    trigger OnPreDataItem();
                    begin
                        ReportForNav.OnPreDataItem('TrackingSpecification', TrackingSpecification);
                    end;
                }
                trigger OnPreDataItem();
                begin
                    ReportForNav.OnPreDataItem('Line', Line);
                end;

                trigger OnAfterGetRecord();
                begin
                    GetTrackingSpecification();
                end;

            }
            dataitem(SalesTaxBuffer; "ForNAV Sales Tax Buffer")
            {
                UseTemporary = true;
                DataItemTableView = sorting("Primary Key");
                column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_SalesTaxBuffer; ReportForNavWriteDataItem('SalesTaxBuffer', SalesTaxBuffer)) { }
                trigger OnPreDataItem();
                begin
                    ReportForNav.OnPreDataItem('SalesTaxBuffer', SalesTaxBuffer);
                end;
            }
            trigger OnPreDataItem();
            begin
                ReportForNav.OnPreDataItem('Header', Header);
            end;

            trigger OnAfterGetRecord();
            begin

                ChangeLanguage("Language Code");
                GetSalesTaxDetails();
                UpdateNoPrinted();
            end;

        }
    }


    requestpage
    {

        SaveValues = true;

        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(NoOfCopies; NoOfCopies)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'No. of Copies';
                        ToolTip = 'Specifies the number of copies.';
                    }
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Design';
                        ToolTip = 'Opens the report in the ForNAV designer.';
                        Visible = ReportForNavAllowDesign;
                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;
                    }
                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;
        Codeunit.Run(Codeunit::"ForNAV First Time Setup");
    end;

    trigger OnPostReport()
    begin



    end;

    trigger OnPreReport()
    begin
        ;

        ReportForNav.SetCopies('Header', NoOfCopies);
        LoadWatermark();
        ;
        ReportsForNavPre;

    end;

    var
        ForNAVCheckDocumentDiscount: Codeunit "ForNAV Check Document Discount";
        NoOfCopies: Integer;

    local procedure ChangeLanguage(LanguageCode: Code[10])
    var
        ForNAVSetup: Record "ForNAV Setup";
    begin
        ForNAVSetup.Get();
        if ForNAVSetup."Inherit Language Code" then
            CurrReport.Language(ReportForNav.GetLanguageID(LanguageCode));
    end;

    local procedure GetSalesTaxDetails()
    var
        ForNAVGetSalesTaxDetails: Codeunit "ForNAV Get Sales Tax Details";
    begin
        SalesTaxBuffer.DeleteAll();
        ForNAVGetSalesTaxDetails.GetSalesTax(Header, SalesTaxBuffer);
    end;

    local procedure UpdateNoPrinted()
    var
        ForNAVUpdateNoPrinted: Codeunit "ForNAV Update No. Printed";
    begin
        ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.Preview);
    end;

    local procedure LoadWatermark()
    var
        ForNAVSetup: Record "ForNAV Setup";
    begin
        ForNAVSetup.Get();
        if not PrintLogo(ForNAVSetup) then
            exit;
        ForNAVSetup.CalcFields("Document Watermark");
        if not ForNAVSetup."Document Watermark".Hasvalue then
            exit;

        ReportForNav.LoadWatermarkImage(ForNAVSetup.GetDocumentWatermark());
    end;

    procedure PrintLogo(ForNAVSetup: Record "ForNAV Setup"): Boolean
    begin
        if not ForNAVSetup."Use Preprinted Paper" then
            exit(true);
        if 'Pdf' = 'PDF' then
            exit(true);
        if 'Pdf' = 'Preview' then
            exit(true);
        exit(false);
    end;

    local procedure GetTrackingSpecification()
    var
        RedGetTracking: Codeunit "Red Get Tracking";
        RecRef: RecordRef;
    begin
        TrackingSpecification.DeleteAll();
        if Line.Type <> Line.Type::Item then
            exit;

        RecRef.GetTable(Line);
        RedGetTracking.GetTrackingSpecification(TrackingSpecification, RecRef);
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        ReportForNavInitialized: Boolean;
        ReportForNavShowOutput: Boolean;
        ReportForNavTotalsCausedBy: Integer;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;
        ReportForNav: Codeunit "ForNAV Report Management";

    local procedure ReportsForNavInit()
    var
        id: Integer;
    begin
        Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));
        ReportForNav.OnInit(id, ReportForNavAllowDesign);
    end;

    local procedure ReportsForNavPre()
    begin
        if ReportForNav.LaunchDesigner(ReportForNavOpenDesigner) then CurrReport.Quit();
    end;

    local procedure ReportForNavSetTotalsCausedBy(value: Integer)
    begin
        ReportForNavTotalsCausedBy := value;
    end;

    local procedure ReportForNavSetShowOutput(value: Boolean)
    begin
        ReportForNavShowOutput := value;
    end;

    local procedure ReportForNavInit(jsonObject: JsonObject)
    begin
        ReportForNav.Init(jsonObject, CurrReport.ObjectId);
    end;

    local procedure ReportForNavWriteDataItem(dataItemId: Text; rec: Variant): Text
    var
        values: Text;
        jsonObject: JsonObject;
        currLanguage: Integer;
    begin
        if not ReportForNavInitialized then begin
            ReportForNavInit(jsonObject);
            ReportForNavInitialized := true;
        end;

        case (dataItemId) of
            'Header':
                begin
                    jsonObject.Add('CurrReport$Language$Integer', CurrReport.Language);
                end;
            'TrackingSpecification':
                begin
                    currLanguage := GlobalLanguage;
                    GlobalLanguage := 1033;
                    jsonObject.Add('DataItem$TrackingSpecification$CurrentKey$Text', TrackingSpecification.CurrentKey);
                    GlobalLanguage := currLanguage;
                end;
        end;
        ReportForNav.AddDataItemValues(jsonObject, dataItemId, rec);
        jsonObject.WriteTo(values);
        exit(values);
    end;
    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
